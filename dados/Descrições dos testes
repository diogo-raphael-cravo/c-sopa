Intrudução
----------

Este arquivo descreve testes, explicando o que eles fazem e o resultado esperado.
Testes devem ser escritos no formato:

=====================================================
<número-do-teste>)					 <nome-do-teste>
Nome do Arquivo:					 <texto>
Resultado Esperado:					 <enumeração-de-resultados>
Última revisão em que esteve OK:	 <número-da-revisão>
Dependências:						 <números-de-outros-testes>
=====================================================

Testes
------

=====================================================
1)									 Loop Infinito
Nome do Arquivo:					 loopInfinito
Resultado Esperado:					 *rodar para sempre
Última revisão em que esteve OK:	 54
Dependências:						 -
=====================================================

=====================================================
2)									 Falha de Segmentação
Nome do Arquivo:					 falhaSegmentacao
Resultado Esperado:					 *jogar falha de segmentação
Última revisão em que esteve OK:	 54
Dependências:						 -
=====================================================

=====================================================
3)									 Load Register from Constant
Nome do Arquivo:					 LC
Resultado Esperado:					 *número 1 em todos registradores
									 *jogar falha de segmentação
Última revisão em que esteve OK:	 58
Dependências:						 -
=====================================================

=====================================================
4)									 Write Register in Memory
Nome do Arquivo:					 WM
Resultado Esperado:					 *número 1 em sua posição 0 de memória
									 *jogar falha de segmentação
Última revisão em que esteve OK:	 58
Dependências:						 3
=====================================================

=====================================================
5)									 Load Register from Memory
Nome do Arquivo:					 LM
Resultado Esperado:					 *número 1 no registrador 0
									 *jogar falha de segmentação
Última revisão em que esteve OK:	 58
Dependências:						 4
=====================================================

=====================================================
6)									 Subtract Registers
Nome do Arquivo:					 SU
Resultado Esperado:					 *número 3 no registrador 0
									 *jogar falha de segmentação
Última revisão em que esteve OK:	 58
Dependências:						 3
=====================================================

=====================================================
7)									 Add Registers
Nome do Arquivo:					 AD
Resultado Esperado:					 *número 3 no registrador 0
									 *jogar falha de segmentação
Última revisão em que esteve OK:	 58
Dependências:						 3
=====================================================

=====================================================
8)									 Decrement Register
Nome do Arquivo:					 DEC
Resultado Esperado:					 *número 255 no registrador 0
									 *jogar falha de segmentação
Última revisão em que esteve OK:	 58
Dependências:						 3
=====================================================

=====================================================
9)									 Increment Register
Nome do Arquivo:					 INC
Resultado Esperado:					 *número 256 no registrador 0
									 *jogar falha de segmentação
Última revisão em que esteve OK:	 58
Dependências:						 3
=====================================================

=====================================================
10)									 Compare Registers Z
Nome do Arquivo:					 CPZ
Resultado Esperado:					 *flags do processador Z=1, E=0, L=1
									 *jogar falha de segmentação
Última revisão em que esteve OK:	 58
Dependências:						 3
=====================================================

=====================================================
11)									 Compare Registers E
Nome do Arquivo:					 CPE
Resultado Esperado:					 *flags do processador Z=0, E=1, L=0
									 *jogar falha de segmentação
Última revisão em que esteve OK:	 58
Dependências:						 3
=====================================================

=====================================================
12)									 Compare Registers L
Nome do Arquivo:					 CPL
Resultado Esperado:					 *flags do processador Z=0, E=0, L=1
									 *jogar falha de segmentação
Última revisão em que esteve OK:	 58
Dependências:						 3
=====================================================

=====================================================
13)									 Jump on Zero
Nome do Arquivo:					 JPZ
Resultado Esperado:					 *PC incrementa até 7
									 *quando PC=7, PC <- 70
									 *jogar falha de segmentação
Última revisão em que esteve OK:	 58
Dependências:						 8, 12
=====================================================

=====================================================
14)									 Jump on Equal
Nome do Arquivo:					 JPE
Resultado Esperado:					 *PC incrementa até 7
									 *quando PC=8, PC <- 70
									 *jogar falha de segmentação
Última revisão em que esteve OK:	 58
Dependências:						 9, 12
=====================================================

=====================================================
15)									 Jump on Less
Nome do Arquivo:					 JPL
Resultado Esperado:					 *PC incrementa até 6
									 *quando PC=7, PC <- 60
									 *jogar falha de segmentação
Última revisão em que esteve OK:	 58
Dependências:						 3, 12
=====================================================

=====================================================
16)									 Exit Interruption
Nome do Arquivo:					 EXIT
Resultado Esperado:					 *Programa termina sem falhas
Última revisão em que esteve OK:	 60
Dependências:						 -
=====================================================

=====================================================
17)									 Load Register from Constant 32bits
Nome do Arquivo:					 LDC
Resultado Esperado:					 *Programa termina sem falhas
									 *Todos registradores terminam com valor 168430090, exceto o registrador 1, que terá valor 0
									 *Nenhum NOP é executado
Última revisão em que esteve OK:	 60
Dependências:						 16
=====================================================

=====================================================
18)									 Load Register from Memory 32bits
Nome do Arquivo:					 LDM
Resultado Esperado:					 *Programa termina sem falhas
									 *Todos registradores terminam com -1, exceto o registrador 1, que terá valor 1279544576
									 *Nenhum NOP é executado
Última revisão em que esteve OK:	 60
Dependências:						 16
=====================================================

=====================================================
19)									 Open File Interruption
Nome do Arquivo:					 OPEN
Resultado Esperado:					 *Programa termina sem falhas
									 *Abre um arquivo chamado ABCDEFGHI para leitura
Última revisão em que esteve OK:	 67
Dependências:						 17
=====================================================

=====================================================
20)									 Close File Interruption
Nome do Arquivo:					 CLOSE
Resultado Esperado:					 *Programa termina sem falhas
									 *Abre um arquivo chamado ABCDEFGHI para leitura
									 *Fecha o arquivo aberto
									 *Abre novamente um arquivo chamado ABCDEFGHI para leitura, que desta vez não é criado.
Última revisão em que esteve OK:	 67
Dependências:						 19
=====================================================

=====================================================
21)									 Get from File Interruption
Nome do Arquivo:					 GET
Resultado Esperado:					 *Programa termina sem falhas
									 *Abre um arquivo chamado GET para leitura
									 *Fecha o arquivo aberto
									 *Termina com o valor 20 20 20 20 = 336860180 no registrador r10.
Última revisão em que esteve OK:	 67
Dependências:						 7, 20
=====================================================

=====================================================
22)									 Put in File Interruption
Nome do Arquivo:					 PUT
Resultado Esperado:					 *Programa termina sem falhas
									 *Abre um arquivo chamado PUT para leitura
									 *Tenta gravar e não consegue.
									 *Fecha o arquivo.
									 *Abre novamente o arquivo PUT para escrita
									 *Grava o valor 128 0 0 0 = -2147483648 na segunda posição do arquivo
									 *Fecha o arquivo aberto
									 *Termina com o valor 128 0 0 0 = -2147483648 no registrador r10.
Última revisão em que esteve OK:	 67
Dependências:						 14, 21
=====================================================

=====================================================
23)									 Arquivo com múltiplos segmentos
Nome do Arquivo:					 multiplosSegmentos
Resultado Esperado:					 *Programa termina sem falhas
									 *Abre um arquivo chamado 'paerwqrd' para escrita
									 *Grava 33 palavas (os números de 1 a 33) no arquivo, o que forçará a criação de um novo segmento.
									 *Fecha o arquivo 'paerwqrd'.
									 *Abre o arquivo 'paerwqrd' para leitura.
									 *Lê o arquivo até o fim, exibindo os números de 1 a 33.
									 *Fecha o arquivo 'paerwqrd'.
Última revisão em que esteve OK:	 71
Dependências:						 15, 21, 22
									 TAMANHO_ARQUIVO_RECEM_CRIADO em SistemaArquivos.h deve ser 32
=====================================================

=====================================================
24)									 Push Register into Stack
Nome do Arquivo:					 PUS
Resultado Esperado:					 *Programa insere 10 valores na stack
									 *Programa termina com estouro de pilha
Última revisão em que esteve OK:	 74
Dependências:						 -
									 O tamanho da stack do processo deve ser 10
=====================================================

=====================================================
25)									 Pop Register from Stack
Nome do Arquivo:					 POP
Resultado Esperado:					 *Programa insere 10 valores na stack (em ordem, de 1 a 10).
									 *Programa coloca os 10 valores da stack nos 10 registradores de 1 a 10.
									 *Programa tenta ler 11ª posição da stack.
									 *Programa termina com estouro de pilha
Última revisão em que esteve OK:	 74
Dependências:						 3, 24
									 O tamanho da stack do processo deve ser 10
=====================================================

=====================================================
26)									 Call 32 bit Memory Routine
Nome do Arquivo:					 CALL
Resultado Esperado:					 *Chama 10 procedimentos diferentes em cadeia
									 *Termina com estouro de pilha na 11ª chamada.
Última revisão em que esteve OK:	 75
Dependências:						 O tamanho da stack do processo deve ser 10
=====================================================

=====================================================
27)									 Return from 32 bit Call
Nome do Arquivo:					 RETC
Resultado Esperado:					 *Chama 3 procedimentos diferentes em cadeia e retorna para o procedimento principal
									 *Termina com 1 no registrador 1, 2 no 2, 3 no 3 e 4 no 4.
									 *Termina com estouro de pilha no último RETC, que não corresponde a CALL algum.
Última revisão em que esteve OK:	 75
Dependências:						 3, 26
									 O tamanho da stack do processo deve ser no mínimo 3
=====================================================

=====================================================
28)									 Load Register Indirectly from Register
Nome do Arquivo:					 LI
Resultado Esperado:					 *Programa termina sem erros.
									 *Programa termina com valor 15 15 15 15 no registrador r12.
Última revisão em que esteve OK:	 78
Dependências:						 4, 16, 17
=====================================================

=====================================================
29)									 Write Register Indirectly from Register
Nome do Arquivo:					 WI
Resultado Esperado:					 *Programa termina sem erros.
									 *Programa termina com valor 99 99 99 99 no registrador r14.
Última revisão em que esteve OK:	 78
Dependências:						 28
=====================================================

=====================================================
30)									 Long jumps
Nome do Arquivo:					 J_CAZEL_RAZEL
Resultado Esperado:					 *Faz 8 jumps (JCA, JCZ, JCE, JCL, JRA, JRZ, JRE e JRL).
									 *Todos jumps condicionais falham uma vez antes de funcionarem.
									 *Os jumps alternam entre a posição 0 e a posição 300.
									 *Nenhum NOP é executado.
									 *Ao terminar, registradores 5 a 10 possuem valor 99 99 99 99.
									 *Programa termina sem falhas.
Última revisão em que esteve OK:	 80
Dependências:						 9, 16, 17
=====================================================

=====================================================
31)									 Print Interruption
Nome do Arquivo:					 PRINT
Resultado Esperado:					 *Programa termina sem erros.
									 *Programa imprime as linhas:
									 	I S T O
									 	F U N C
									 	I O N A
Última revisão em que esteve OK:	 81
Dependências:						 16, 17
=====================================================

=====================================================
32)									 Remote Procedure Call Interruption
Nome do Arquivo:					 RPC
Resultado Esperado:					 *Programa termina sem erros.
									 *Programa exibe a mensagem "RPC: ERRO: nao consegui conectar ao servidor!".
									 
Última revisão em que esteve OK:	 -
Dependências:						 16, 17
									 O IP 212.23.12.103 não deve estar rodando um SOPA.
=====================================================











